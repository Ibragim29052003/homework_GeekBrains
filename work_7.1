import Foundation

//  1 Задание

func name () throws -> String?{
    guard let name = readLine() else{
         return "Неверный ввод имени!"
        }
    guard !name.isEmpty else {
        return "Имя не введено!"
    }
    return name
}

func age () throws -> String?{
    guard let age = readLine()  else{
        return "Неверный ввод возраста!"
    }
    guard !age.isEmpty else {
        return "Возраст не введен!"
    }
    guard let age_1 = Int(age) else {
        return "Введено не число!"
    }
    return String(age_1)
}

func ageName() throws{
    guard let name = try name() else {return}
    guard let age = try age() else {return}
    print("Имя: \(name), возраст:  \(age) ")

}

   func foo(){
do{
    try ageName()
} catch{
    print(error.localizedDescription)
}


}
foo()

//  2 Задание



enum sparePartsCategoryError : LocalizedError{ //ошибка категории запчасти
    case wrongInputCategory
    case nameSparePartsEmpty
    var errorDescription: String?{
        switch self {
        case .wrongInputCategory:
            return "Неверное имя запчасти!"
        case .nameSparePartsEmpty:
            return "Имя запчасти не указано!"
    }
}
}
enum sparePartsNumberError : LocalizedError{ //ошибка в номере запчасти
    case wrongInputNumber
    case numberSparePartsEmty
    case notInteger
    var errorDescription: String?{
        switch self {
        case .wrongInputNumber:
            return "Неверный номер запчасти!"
        case .numberSparePartsEmty:
            return "Номер запчасти не указан!"
        case .notInteger:
            return "Введено не число"
        }
    }


}





func sparePartsCategory() throws -> String{

    guard let sparePartsC = readLine() else{
        throw sparePartsCategoryError.wrongInputCategory
    }
    guard !sparePartsC.isEmpty else{
        throw sparePartsCategoryError.nameSparePartsEmpty
    }
    return sparePartsC
}






func  sparePartsNumber() throws -> Int{

    guard let sparePartsN = readLine() else{
        throw sparePartsNumberError.wrongInputNumber
    }
    guard !sparePartsN.isEmpty else{
        throw sparePartsNumberError.numberSparePartsEmty
    }
    guard let spareParts = Int(sparePartsN) else{
        throw  sparePartsNumberError.notInteger
    }

    return spareParts
}



func sparePartsNumCat() throws{
    let sparePartsCat = try sparePartsCategory()
    let sparePartsNum  = try sparePartsNumber()
    print("Категория \( sparePartsCat) , номер \( sparePartsNum)")
}

//func foo(){
do{
    try sparePartsNumCat()
} catch(let sparePartCat){
    print(sparePartCat.localizedDescription)
}



do{
    try sparePartsNumCat()
} catch(let sparePartNum){
    print(sparePartNum.localizedDescription)
}

